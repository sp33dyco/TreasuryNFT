var $iyY9t$ethersprojectbytes = require("@ethersproject/bytes");
var $iyY9t$noblecurvesed25519 = require("@noble/curves/ed25519");
var $iyY9t$stablelibed25519 = require("@stablelib/ed25519");
var $iyY9t$base64url = require("base64url");
var $iyY9t$bs58 = require("bs58");
var $iyY9t$didjwt = require("did-jwt");
var $iyY9t$multibase = require("multibase");
var $iyY9t$multicodec = require("multicodec");
var $iyY9t$axios = require("axios");
var $iyY9t$axiosoauthclient = require("axios-oauth-client");
var $iyY9t$axiostokeninterceptor = require("axios-token-interceptor");
var $iyY9t$lodash = require("lodash");

function $parcel$defineInteropFlag(a) {
  Object.defineProperty(a, '__esModule', {value: true, configurable: true});
}
function $parcel$exportWildcard(dest, source) {
  Object.keys(source).forEach(function(key) {
    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function get() {
        return source[key];
      }
    });
  });

  return dest;
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

$parcel$defineInteropFlag(module.exports);

$parcel$export(module.exports, "PIIEncryptionMethod", () => $a9b5a4a3f269f538$export$f86f705002284471);
$parcel$export(module.exports, "default", () => $a9b5a4a3f269f538$export$2e2bcd8739ae039);
/* eslint-disable @typescript-eslint/no-explicit-any */ var $cfd6274aae82b2e8$exports = {};

$parcel$export($cfd6274aae82b2e8$exports, "Ecdh1PuXC20P", () => $cfd6274aae82b2e8$export$c4ca299f216c34fa);
/* eslint-disable @typescript-eslint/no-explicit-any */ 







class $a9e8dc10b29de72d$export$7a95228d63ff9c73 extends Error {
    constructor(message){
        super(message);
        this.name = this.constructor.name;
    }
}
class $a9e8dc10b29de72d$export$6056393a42e6200 extends $a9e8dc10b29de72d$export$7a95228d63ff9c73 {
    constructor(){
        super("Failed to obtain EscrowKeyPair");
    }
}
class $a9e8dc10b29de72d$export$81aeb50fb13eda7c extends $a9e8dc10b29de72d$export$7a95228d63ff9c73 {
    constructor(){
        super('Missing "privateKeyHex" in provded "keypair"');
    }
}
class $a9e8dc10b29de72d$export$2379144aad3920ea extends $a9e8dc10b29de72d$export$7a95228d63ff9c73 {
    constructor(detail){
        super("Missing Input Variable: " + detail);
    }
}
class $a9e8dc10b29de72d$export$54eafeffd3516200 extends $a9e8dc10b29de72d$export$7a95228d63ff9c73 {
    constructor(detail){
        super(detail);
    }
}


function $cfd6274aae82b2e8$var$decodeJoseBlob(blob) {
    return JSON.parse(Buffer.from((0, ($parcel$interopDefault($iyY9t$base64url))).decode(blob), "utf-8").toString());
}
function $cfd6274aae82b2e8$var$convertPublicKeyToX25519Kid(key) {
    const myKeyBytes = (0, $iyY9t$stablelibed25519.convertPublicKeyToX25519)((0, $iyY9t$ethersprojectbytes.arrayify)("0x" + key));
    const hexKey = (0, $iyY9t$ethersprojectbytes.hexlify)(myKeyBytes).substring(2);
    return Buffer.from((0, ($parcel$interopDefault($iyY9t$multibase))).encode("base58btc", (0, ($parcel$interopDefault($iyY9t$multicodec))).addPrefix("x25519-pub", Buffer.from(hexKey, "hex")))).toString();
}
async function $cfd6274aae82b2e8$var$computeRecipient(didkey) {
    // decode did:key public key
    didkey = didkey.split("#")[0]; // sanitize potential anchors
    const publicKeyBytes = (0, ($parcel$interopDefault($iyY9t$bs58))).decode(didkey.replace("did:key:z", "")).slice(2);
    const publicKeyHex = Buffer.from(publicKeyBytes).toString("hex");
    const kid = didkey + "#" + $cfd6274aae82b2e8$var$convertPublicKeyToX25519Kid(publicKeyHex);
    return {
        kid: kid,
        publicKeyBytes: publicKeyBytes,
        publicKeyHex: publicKeyHex
    };
}
class $cfd6274aae82b2e8$export$c4ca299f216c34fa {
    async createKey() {
        // We replaced "@transmute/did-key-ed25519" by "@noble/curves/ed25519", below is the did:key generation part
        const priv = (0, $iyY9t$noblecurvesed25519.ed25519).utils.randomPrivateKey();
        const privateKeyHex = Buffer.from(priv).toString("hex");
        const pub = (0, $iyY9t$noblecurvesed25519.ed25519).getPublicKey(priv);
        const publicKeyHex = Buffer.from(pub).toString("hex");
        const buffer = new Uint8Array(2 + pub.length);
        buffer[0] = 237; // ED25519_MULTICODEC_IDENTIFIER;
        buffer[1] = 1; // VARIABLE_INTEGER_TRAILING_BYTE;
        buffer.set(pub, 2);
        const fingerprint = `z${(0, ($parcel$interopDefault($iyY9t$bs58))).encode(buffer)}`;
        const did = `did:key:${fingerprint}`;
        return {
            did: did,
            controllerKeyId: publicKeyHex,
            keys: [
                {
                    type: "Ed25519",
                    kid: publicKeyHex,
                    publicKeyHex: publicKeyHex,
                    meta: {
                        algorithms: [
                            "Ed25519",
                            "EdDSA"
                        ]
                    },
                    kms: "local",
                    privateKeyHex: privateKeyHex + publicKeyHex
                }
            ],
            services: [],
            provider: "did:key"
        };
    }
    async encrypt(args) {
        if (!args?.message?.from) throw new (0, $a9e8dc10b29de72d$export$2379144aad3920ea)(`"from"`);
        // 2: compute recipients
        const recipients = [];
        const sender = await $cfd6274aae82b2e8$var$computeRecipient(args.message.from);
        recipients.push(sender);
        if (args.message.to) recipients.push(await $cfd6274aae82b2e8$var$computeRecipient(args.message.to));
        for (const to of args.bcc)recipients.push(await $cfd6274aae82b2e8$var$computeRecipient(to));
        // 3. create Encrypter for each recipient
        const encrypters = recipients.map((recipient)=>{
            return (0, $iyY9t$didjwt.xc20pAuthEncrypterEcdh1PuV3x25519WithXc20PkwV2)((0, $iyY9t$stablelibed25519.convertPublicKeyToX25519)(recipient.publicKeyBytes), (0, $iyY9t$stablelibed25519.convertSecretKeyToX25519)(Buffer.from(args.senderPrivateKeyHex, "hex")), {
                kid: recipient.kid
            });
        }).filter((x)=>!!x);
        const protectedHeader = {
            skid: sender.kid,
            typ: "application/didcomm-encrypted+json"
        };
        // 4. createJWE
        const messageBytes = Buffer.from(JSON.stringify(args.message), "utf-8");
        const jwe = await (0, $iyY9t$didjwt.createJWE)(messageBytes, encrypters, protectedHeader);
        const message = JSON.stringify(jwe);
        return message;
    }
    async decrypt(jwe, recipientPrivateKeyHex) {
        const protectedHeader = $cfd6274aae82b2e8$var$decodeJoseBlob(jwe.protected);
        const isender = await $cfd6274aae82b2e8$var$computeRecipient(protectedHeader.skid);
        for (const recipient of jwe.recipients || []){
            if (!recipient.header.kid) throw new (0, $a9e8dc10b29de72d$export$2379144aad3920ea)("recipient missing header kid value");
            const decrypter = (0, $iyY9t$didjwt.xc20pAuthDecrypterEcdh1PuV3x25519WithXc20PkwV2)((0, $iyY9t$stablelibed25519.convertSecretKeyToX25519)(Buffer.from(recipientPrivateKeyHex, "hex")), (0, $iyY9t$stablelibed25519.convertPublicKeyToX25519)(isender.publicKeyBytes));
            try {
                const decryptedBytes = await (0, $iyY9t$didjwt.decryptJWE)(jwe, decrypter);
                const decryptedMsg = Buffer.from(decryptedBytes).toString();
                const message = JSON.parse(decryptedMsg);
                return message;
            } catch (err) {
            // no-op
            }
        }
        throw new (0, $a9e8dc10b29de72d$export$54eafeffd3516200)("unable to decrypt DIDComm message with any of the locally managed keys");
    }
}



/* eslint-disable @typescript-eslint/no-explicit-any */ 


/* eslint-disable @typescript-eslint/no-explicit-any */ // copied from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze
function $d24c3fb2abf573cc$var$deepFreeze(object) {
    const propNames = Object.getOwnPropertyNames(object);
    for (const name of propNames){
        const value = object[name];
        if (value && typeof value === "object") $d24c3fb2abf573cc$var$deepFreeze(value);
    }
    return Object.freeze(object);
}
function $d24c3fb2abf573cc$export$2e2bcd8739ae039(obj) {
    $d24c3fb2abf573cc$var$deepFreeze(obj.sys || {});
    return obj;
}


const $cc4675d9e8e3b77e$var$tokenInterceptor = (config)=>{
    return ()=>$cc4675d9e8e3b77e$export$257b2d10b709d8ef(config.clientId, config.clientSecret, config.authURL, config.audience);
};
const $cc4675d9e8e3b77e$export$257b2d10b709d8ef = async (clientId, clientSecret, authURL = "https://auth.notabene.id", audience = "https://pii.notabene.id")=>{
    const resp = await (0, ($parcel$interopDefault($iyY9t$axios))).post(`${authURL}/oauth/token`, {
        grant_type: "client_credentials",
        client_id: clientId,
        client_secret: clientSecret,
        audience: audience
    }, {
        headers: {
            "Content-Type": "application/json"
        },
        method: "POST"
    });
    return resp.data;
};
const $cc4675d9e8e3b77e$var$errorInterceptor = (error)=>{
    return Promise.reject({
        req: {
            url: "" + error?.response?.config?.baseURL + error?.response?.config?.url,
            method: error?.request?.method
        },
        status: error?.response?.status,
        statusText: error?.response?.statusText,
        err: JSON.stringify(error?.response?.data?.err || error?.response?.data || error)
    });
};
(0, ($parcel$interopDefault($iyY9t$axios))).interceptors.request.use((res)=>res, (error)=>$cc4675d9e8e3b77e$var$errorInterceptor(error));
(0, ($parcel$interopDefault($iyY9t$axios))).interceptors.response.use((res)=>res, (error)=>$cc4675d9e8e3b77e$var$errorInterceptor(error));
function $cc4675d9e8e3b77e$export$5d730b7aed1a3eb0(config) {
    const client = (0, ($parcel$interopDefault($iyY9t$axios))).create({
        headers: {
            "X-Notabene-SDK": "pii-sdk"
        }
    });
    client.interceptors.request.use((res)=>res, (error)=>$cc4675d9e8e3b77e$var$errorInterceptor(error));
    client.interceptors.response.use((res)=>res, (error)=>$cc4675d9e8e3b77e$var$errorInterceptor(error));
    client.interceptors.response.use((response)=>{
        return (0, $d24c3fb2abf573cc$export$2e2bcd8739ae039)(response.data);
    });
    client.interceptors.request.use((0, ($parcel$interopDefault($iyY9t$axiosoauthclient))).interceptor((0, ($parcel$interopDefault($iyY9t$axiostokeninterceptor))), $cc4675d9e8e3b77e$var$tokenInterceptor(config)));
    return client;
}


/* eslint-disable @typescript-eslint/no-explicit-any */ 
function $b84fcacbbf866ad7$export$21f930c44940fd98(params) {
    return $b84fcacbbf866ad7$export$cae1ce83fe4a1782(params);
}
function $b84fcacbbf866ad7$export$cae1ce83fe4a1782(params) {
    return (0, ($parcel$interopDefault($iyY9t$lodash))).reduce(params, function(result, value, key) {
        return (0, ($parcel$interopDefault($iyY9t$lodash))).set(result, key, value);
    }, {});
}
function $b84fcacbbf866ad7$export$9c68d69a4c5bbcf9(obj, preserveEmpty = false) {
    return $b84fcacbbf866ad7$export$bffa455ba8c619a6(obj, preserveEmpty);
}
function $b84fcacbbf866ad7$export$bffa455ba8c619a6(obj, preserveEmpty = false) {
    return (0, ($parcel$interopDefault($iyY9t$lodash))).transform(obj, function(result, value, key) {
        if ((0, ($parcel$interopDefault($iyY9t$lodash))).isObject(value)) {
            const flatMap = (0, ($parcel$interopDefault($iyY9t$lodash))).mapKeys($b84fcacbbf866ad7$export$bffa455ba8c619a6(value, preserveEmpty), function(_mvalue, mkey) {
                if ((0, ($parcel$interopDefault($iyY9t$lodash))).isArray(value)) {
                    const index = mkey.indexOf(".");
                    if (-1 !== index) return `${key}[${mkey.slice(0, index)}]${mkey.slice(index)}`;
                    return `${key}[${mkey}]`;
                }
                return `${key}.${mkey}`;
            });
            (0, ($parcel$interopDefault($iyY9t$lodash))).assign(result, flatMap);
            // Preverve Empty arrays and objects
            if (preserveEmpty && (0, ($parcel$interopDefault($iyY9t$lodash))).keys(flatMap).length === 0) result[key] = value;
        } else result[key] = value;
        return result;
    }, {});
}



let $a9b5a4a3f269f538$export$f86f705002284471;
(function(PIIEncryptionMethod) {
    PIIEncryptionMethod[PIIEncryptionMethod["HOSTED"] = 0] = "HOSTED";
    PIIEncryptionMethod[PIIEncryptionMethod["END_2_END"] = 1] = "END_2_END";
    PIIEncryptionMethod[PIIEncryptionMethod["HYBRID"] = 2] = "HYBRID";
})($a9b5a4a3f269f538$export$f86f705002284471 || ($a9b5a4a3f269f538$export$f86f705002284471 = {}));
const $a9b5a4a3f269f538$var$defaults = {
    piiURL: "https://pii.notabene.id",
    audience: "https://pii.notabene.id",
    authURL: "https://auth.notabene.id"
};
class $a9b5a4a3f269f538$export$2e2bcd8739ae039 {
    constructor(config){
        const configWithDefaults = {
            ...$a9b5a4a3f269f538$var$defaults,
            ...config
        };
        this.config = configWithDefaults;
        this.http = (0, $cc4675d9e8e3b77e$export$5d730b7aed1a3eb0)(this.config);
        this.agent = new (0, $cfd6274aae82b2e8$export$c4ca299f216c34fa)();
    }
    async createKey() {
        return this.agent.createKey();
    }
    async getEscrowDIDkey(vaspDID) {
        if (!this.config.piiURL) throw new (0, $a9e8dc10b29de72d$export$2379144aad3920ea)("NOTABENE_PII_URL");
        const resp = await this.http.get(this.config.piiURL + "/get-escrow-didkey?vaspDID=" + vaspDID);
        return resp;
    }
    async rotateEscrowDIDkey(vaspDID) {
        if (!this.config.piiURL) throw new (0, $a9e8dc10b29de72d$export$2379144aad3920ea)("NOTABENE_PII_URL");
        const resp = await this.http.get(this.config.piiURL + "/rotate-escrow-didkey?vaspDID=" + vaspDID);
        return resp;
    }
    async encryptPII(input) {
        const { senderDIDKey: senderDIDKey , keypair: keypair , body: body , recipientDIDkeys: recipientDIDkeys  } = input;
        const message = {
            type: "notabene.escrow.pii.message",
            from: senderDIDKey,
            to: undefined,
            id: "notabene.escriw.pii-" + new Date().getTime(),
            body: body
        };
        const senderPrivateKeyHex = keypair?.keys?.[0]?.privateKeyHex;
        if (!senderPrivateKeyHex) throw new (0, $a9e8dc10b29de72d$export$81aeb50fb13eda7c)();
        const emsg = await this.agent.encrypt({
            message: message,
            bcc: recipientDIDkeys,
            senderPrivateKeyHex: senderPrivateKeyHex
        });
        return emsg;
    }
    async decryptPII(input) {
        const senderPrivateKeyHex = input.keypair?.keys?.[0]?.privateKeyHex;
        if (!senderPrivateKeyHex) throw new (0, $a9e8dc10b29de72d$export$81aeb50fb13eda7c)();
        const dmsg = await this.agent.decrypt(JSON.parse(input.encryptedMessage), senderPrivateKeyHex);
        return dmsg.body;
    }
    flattenPII(data) {
        // flatten complex pii object to single object
        let ret = (0, $b84fcacbbf866ad7$export$bffa455ba8c619a6)(data, true);
        // convert object to array of key-value pairs
        ret = Object.keys(ret).map((key)=>{
            return {
                key: key,
                value: ret[key]
            };
        });
        // remove non-string & empty string values
        ret = ret.filter((x)=>{
            if (!x.key || typeof x.value !== "string") return false;
            return typeof x.value === "string" && x.value.length;
        });
        return ret;
    }
    unflattenPII(data) {
        // convert array of key-value pairs to single object
        const ret = data.reduce((acc, a)=>{
            return {
                ...acc,
                [a.key]: a.value
            };
        }, {});
        // unflatten object
        return (0, $b84fcacbbf866ad7$export$cae1ce83fe4a1782)(ret);
    }
    async putPII(piiURL, fromDID, toDID, data) {
        const payload = {
            fromDID: fromDID,
            toDID: toDID,
            data: data
        };
        const resp = await this.http.post(`${piiURL}/put`, payload);
        return resp;
    }
    async getPIIfromURL(pii_cid_url) {
        const resp = await this.http.get(pii_cid_url);
        return resp;
    }
    async getPIIbyCIDs(cids, piiURL) {
        if (!cids.length) return [];
        const resp = await this.http.post(`${piiURL}/get`, cids);
        return resp;
    }
    async getPIIObject(pii, piiURL, keypair) {
        const flattenedPii = this.flattenPII(pii);
        const cids = flattenedPii.map((x)=>x.value);
        const outArr = await this.getPIIbyCIDs(cids, piiURL);
        // replace CIDs with the decrypted data
        for (const item of outArr){
            const kv = JSON.parse(item.data);
            const raw = await this.decryptPII({
                encryptedMessage: kv.value,
                keypair: keypair
            });
            flattenedPii.find((x)=>x.value === item.cid).value = raw;
        }
        return this.unflattenPII(flattenedPii);
    }
    async generatePIIField(input) {
        if (!this.config.piiURL) throw new (0, $a9e8dc10b29de72d$export$2379144aad3920ea)("piiURL");
        const recipientDIDkeys = [];
        if (input.encryptionMethod === $a9b5a4a3f269f538$export$f86f705002284471.HYBRID && (input.originatorVASPdid || input.beneficiaryVASPdid // order matters
        )) {
            const escrowKey = (await this.getEscrowDIDkey(input.originatorVASPdid || input.beneficiaryVASPdid)).did;
            if (!escrowKey) throw new (0, $a9e8dc10b29de72d$export$6056393a42e6200)();
            recipientDIDkeys.push(escrowKey);
        }
        if (input.counterpartyDIDKey) recipientDIDkeys.push(input.counterpartyDIDKey);
        const flatPII = this.flattenPII(input.pii);
        for (const obj of flatPII)obj.value = await this.encryptPII({
            keypair: input.keypair,
            senderDIDKey: input.senderDIDKey,
            recipientDIDkeys: recipientDIDkeys,
            body: obj.value
        });
        const cids = await this.putPII(this.config.piiURL, input.originatorVASPdid || input.beneficiaryVASPdid, input.beneficiaryVASPdid || input.originatorVASPdid, flatPII);
        const piiIvms = this.unflattenPII(cids);
        return piiIvms;
    }
}
$parcel$exportWildcard(module.exports, $cfd6274aae82b2e8$exports);


