import { JWE } from "did-jwt";
import { AxiosInstance } from "axios";
interface ICryptography {
    createKey: () => Promise<IKeyPair>;
    encrypt: (args: IPackArgs) => Promise<string>;
    decrypt: (message: JWE, recipientPrivateKeyHex: string) => Promise<IDIDCommMessage>;
}
interface IPackArgs {
    message: IDIDCommMessage;
    bcc: string[];
    senderPrivateKeyHex: string;
}
interface IDIDCommMessage {
    type: string;
    from: string;
    to?: string;
    id: string;
    body: any;
}
interface IKey {
    type: string;
    kid: string;
    publicKeyHex: string;
    meta: {
        algorithms: string[];
    };
    kms: string;
    privateKeyHex: string;
}
interface IKeyPair {
    did: string;
    controllerKeyId: string;
    keys: IKey[];
    services: [];
    provider: 'did:key';
}
export class Ecdh1PuXC20P implements ICryptography {
    createKey(): Promise<IKeyPair>;
    encrypt(args: IPackArgs): Promise<string>;
    decrypt(jwe: JWE, recipientPrivateKeyHex: string): Promise<IDIDCommMessage>;
}
export enum PIIEncryptionMethod {
    HOSTED = 0,
    END_2_END = 1,
    HYBRID = 2
}
export type Config = {
    piiURL?: string | undefined;
    clientId?: string | undefined;
    clientSecret?: string | undefined;
    audience?: string | undefined;
    authURL?: string | undefined;
};
export default class PIIsdk {
    http: AxiosInstance;
    config: Config;
    agent: ICryptography;
    constructor(config: Config);
    createKey(): Promise<IKeyPair>;
    getEscrowDIDkey(vaspDID: string): Promise<any>;
    rotateEscrowDIDkey(vaspDID: string): Promise<any>;
    encryptPII(input: {
        senderDIDKey: string;
        recipientDIDkeys: string[];
        body: string;
        keypair: IKeyPair;
    }): Promise<string>;
    decryptPII(input: {
        encryptedMessage: string;
        keypair: IKeyPair;
    }): Promise<string>;
    flattenPII(data: any): any;
    unflattenPII(data: any): any;
    putPII(piiURL: string, fromDID: string, toDID: string | undefined, data: {
        key: string;
        value: string;
    }[]): Promise<any>;
    getPIIfromURL(pii_cid_url: string): Promise<any>;
    getPIIbyCIDs(cids: string[], piiURL: string): Promise<any>;
    getPIIObject(pii: any, piiURL: string, keypair: IKeyPair): Promise<any>;
    generatePIIField(input: {
        pii: any;
        originatorVASPdid: string | undefined;
        beneficiaryVASPdid: string | undefined;
        counterpartyDIDKey: string | undefined;
        keypair: IKeyPair;
        senderDIDKey: string;
        encryptionMethod: PIIEncryptionMethod;
    }): Promise<any>;
}
