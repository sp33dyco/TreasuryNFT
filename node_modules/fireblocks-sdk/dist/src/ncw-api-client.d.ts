import { ApiClient } from "./api-client";
import { AssetResponse, Web3PagedResponse, NCW } from "./types";
import { NcwSdk } from "./ncw-sdk";
export declare class NcwApiClient implements NcwSdk {
    private readonly apiClient;
    private readonly NCW_BASE_PATH;
    constructor(apiClient: ApiClient);
    createWallet(): Promise<{
        walletId: string;
        enabled: boolean;
    }>;
    getWallet(walletId: string): Promise<{
        walletId: string;
        enabled: boolean;
    }>;
    enableWallet(walletId: string, enabled: boolean): Promise<void>;
    getWalletDevices(walletId: string): Promise<NCW.Device>;
    enableWalletDevice(walletId: string, deviceId: string, enabled: boolean): Promise<void>;
    invokeWalletRpc(walletId: string, deviceId: string, payload: string): Promise<{
        result: string;
    } | {
        error: {
            message: string;
            code?: number;
        };
    }>;
    createWalletAccount(walletId: string): Promise<{
        walletId: string;
        accountId: number;
    }>;
    getWallets({ pageCursor, pageSize, sort, order }?: NCW.GetWalletsPayload): Promise<Web3PagedResponse<NCW.WalletInfo>>;
    getWalletAccounts(walletId: string, { pageCursor, pageSize, sort, order }?: NCW.GetWalletsPayload): Promise<Web3PagedResponse<{
        walletId: string;
        accountId: number;
    }>>;
    getWalletAccount(walletId: string, accountId: number): Promise<{
        walletId: string;
        accountId: number;
    }>;
    getWalletAssets(walletId: string, accountId: number, { pageCursor, pageSize, sort, order }?: NCW.GetWalletAssetsPayload): Promise<Web3PagedResponse<NCW.WalletAssetResponse>>;
    getWalletAsset(walletId: string, accountId: number, assetId: string): Promise<NCW.WalletAssetResponse>;
    activateWalletAsset(walletId: string, accountId: number, assetId: string): Promise<NCW.WalletAssetAddress>;
    getWalletAssetAddresses(walletId: string, accountId: number, assetId: string, { pageCursor, pageSize, sort, order }?: NCW.GetWalletAddressesPayload): Promise<Web3PagedResponse<NCW.WalletAssetAddress>>;
    getWalletAssetBalance(walletId: string, accountId: number, assetId: string): Promise<AssetResponse>;
    refreshWalletAssetBalance(walletId: string, accountId: number, assetId: string): Promise<AssetResponse>;
}
